{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-upds-kuaf-dev-o7c"
		},
		"ADLSLinkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLSLinkedService'"
		},
		"FileLinkedService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileLinkedService'"
		},
		"ADLSLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsupdskuafdevi5l.dfs.core.windows.net/"
		},
		"FileLinkedService_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\DESKTOP-RBFTL9T\\D$\\data"
		},
		"FileLinkedService_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "MicrosoftAccount\\KEVIN"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/business_student_overview')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Demo",
						"description": "Demo",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "demo",
							"value": "demo"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"demo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_business_reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T00:52:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_ga4_core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Demo",
						"description": "Demo",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "demo",
							"value": "demo"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"demo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_raw_source"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T00:52:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLSLinkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRKUAFLocal01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_master_source_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "m_comments1.parquet"
					},
					"appname": {
						"type": "string",
						"defaultValue": "m_sharedknow"
					},
					"objectname": {
						"type": "string",
						"defaultValue": "m_comments"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().appname,'/',dataset().objectname,'/',dataset().filename)",
							"type": "Expression"
						},
						"folderPath": "data",
						"fileSystem": "master"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_target_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "badges.parquet"
					},
					"appname": {
						"type": "string",
						"defaultValue": "sharedknow"
					},
					"objectname": {
						"type": "string",
						"defaultValue": "badges"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().appname,'/',dataset().objectname,'/',dataset().filename)",
							"type": "Expression"
						},
						"folderPath": "data",
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileLinkedService_properties_typeProperties_host')]",
					"userId": "[parameters('FileLinkedService_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileLinkedService_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IRKUAFLocal01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IRKUAFLocal01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"appname": {
						"type": "string"
					},
					"objectname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@concat(dataset().objectname,'/',dataset().filename)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().appname",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Badges')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Badges"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Name as string,",
						"          UserId as string,",
						"          Date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Badges",
						"Badges derive(Id = toInteger(Id),",
						"          UserId = toInteger(UserId),",
						"          Name = toString(Name),",
						"          Date = toDate(Date, 'yyyy-MM-dd HH:mm:ss')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_badges.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Comments')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Comments"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          CreationDate as string,",
						"          PostId as string,",
						"          Score as string,",
						"          UserId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Comments",
						"Comments derive(Id = toInteger(Id),",
						"          CreationDate = toDate(CreationDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          PostId = toInteger(PostId),",
						"          Score = toInteger(Score),",
						"          UserId = toInteger(UserId)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_comments.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Linktypes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Linktypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Linktypes",
						"Linktypes derive(Id = toInteger(Id),",
						"          Type = toString(Type)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_linktypes.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Postlinks')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Postlinks"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          CreationDate as string,",
						"          PostId as string,",
						"          RelatedPostId as string,",
						"          LinkTypeId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Postlinks",
						"Postlinks derive(Id = toInteger(Id),",
						"          CreationDate = toDate(CreationDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          PostId = toInteger(PostId),",
						"          RelatedPostId = toInteger(RelatedPostId),",
						"          LinkTypeId = toInteger(LinkTypeId)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_postlinks.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Posts1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Posts1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          AcceptedAnswerId as string,",
						"          AnswerCount as string,",
						"          ClosedDate as string,",
						"          CommentCount as string,",
						"          CommunityOwnedDate as string,",
						"          CreationDate as string,",
						"          FavoriteCount as string,",
						"          LastActivityDate as string,",
						"          LastEditDate as string,",
						"          LastEditorUserId as string,",
						"          OwnerUserId as string,",
						"          ParentId as string,",
						"          PostTypeId as string,",
						"          Score as string,",
						"          Tags as string,",
						"          ViewCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Posts1",
						"Posts1 derive(Id = toInteger(Id),",
						"          AcceptedAnswerId = toInteger(AcceptedAnswerId),",
						"          AnswerCount = toInteger(AnswerCount),",
						"          ClosedDate = toDate(ClosedDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          CommentCount = toInteger(CommentCount),",
						"          CommunityOwnedDate = toDate(CommunityOwnedDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          CreationDate = toDate(CreationDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          FavoriteCount = toInteger(FavoriteCount),",
						"          LastActivityDate = toDate(LastActivityDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          LastEditDate = toDate(LastEditDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          LastEditorUserId = toInteger(LastEditorUserId),",
						"          OwnerUserId = toInteger(OwnerUserId),",
						"          ParentId = toInteger(ParentId),",
						"          PostTypeId = toInteger(PostTypeId),",
						"          Score = toInteger(Score),",
						"          Tags = toString(Tags),",
						"          ViewCount = toInteger(ViewCount)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_posts_200801.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Posts2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Posts2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          AcceptedAnswerId as string,",
						"          AnswerCount as string,",
						"          ClosedDate as string,",
						"          CommentCount as string,",
						"          CommunityOwnedDate as string,",
						"          CreationDate as string,",
						"          FavoriteCount as string,",
						"          LastActivityDate as string,",
						"          LastEditDate as string,",
						"          LastEditorUserId as string,",
						"          OwnerUserId as string,",
						"          ParentId as string,",
						"          PostTypeId as string,",
						"          Score as string,",
						"          Tags as string,",
						"          ViewCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Posts2",
						"Posts2 derive(Id = toInteger(Id),",
						"          AcceptedAnswerId = toInteger(AcceptedAnswerId),",
						"          AnswerCount = toInteger(AnswerCount),",
						"          ClosedDate = toDate(ClosedDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          CommentCount = toInteger(CommentCount),",
						"          CommunityOwnedDate = toDate(CommunityOwnedDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          CreationDate = toDate(CreationDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          FavoriteCount = toInteger(FavoriteCount),",
						"          LastActivityDate = toDate(LastActivityDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          LastEditDate = toDate(LastEditDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          LastEditorUserId = toInteger(LastEditorUserId),",
						"          OwnerUserId = toInteger(OwnerUserId),",
						"          ParentId = toInteger(ParentId),",
						"          PostTypeId = toInteger(PostTypeId),",
						"          Score = toInteger(Score),",
						"          Tags = toString(Tags),",
						"          ViewCount = toInteger(ViewCount)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_posts_200901.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Posttypes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Posttypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Posttypes",
						"Posttypes derive(Id = toInteger(Id),",
						"          Type = toString(Type)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_posttypes.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Users')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Users"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          CreationDate as string,",
						"          DownVotes as string,",
						"          LastAccessDate as string,",
						"          Reputation as string,",
						"          UpVotes as string,",
						"          Views as string,",
						"          AccountId as string,",
						"          Email as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Users",
						"Users derive(Id = toInteger(Id),",
						"          CreationDate = toDate(CreationDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          DownVotes = toInteger(DownVotes),",
						"          LastAccessDate = toDate(LastAccessDate, 'yyyy-MM-dd HH:mm:ss'),",
						"          Reputation = toInteger(Reputation),",
						"          UpVotes = toInteger(UpVotes),",
						"          Views = toInteger(Views),",
						"          AccountId = toInteger(AccountId),",
						"          Email = toString(Email)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_users.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Votes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Votes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          PostId as string,",
						"          UserId as string,",
						"          BountyAmount as string,",
						"          VoteTypeId as string,",
						"          CreationDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Votes",
						"Votes derive(Id = toInteger(Id),",
						"          PostId = toInteger(PostId),",
						"          UserId = toInteger(UserId),",
						"          BountyAmount = toInteger(BountyAmount),",
						"          VoteTypeId = toInteger(VoteTypeId),",
						"          CreationDate = toDate(CreationDate, 'yyyy-MM-dd HH:mm:ss')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_votes.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Votetypes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "Votetypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Votetypes",
						"Votetypes derive(Id = toInteger(Id),",
						"          Name = toString(Name)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_votetypes.parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_target_parquet",
								"type": "DatasetReference"
							},
							"name": "RawUsers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_master_source_parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          CreationDate as string,",
						"          DownVotes as string,",
						"          LastAccessDate as string,",
						"          Reputation as string,",
						"          UpVotes as string,",
						"          Views as string,",
						"          AccountId as string,",
						"          Email as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> RawUsers",
						"RawUsers select(mapColumn(",
						"          Id,",
						"          DownVotes,",
						"          LastAccessDate,",
						"          Reputation,",
						"          UpVotes,",
						"          Views,",
						"          AccountId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Valoracion = toInteger(Reputation) + 100) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'m_users[n].parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_target_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_master_source_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master_party_core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF Users",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawUsers": {
										"filename": "users.parquet",
										"appname": "sharedknow",
										"objectname": "users"
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"demo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "02_master_models"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T00:52:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}